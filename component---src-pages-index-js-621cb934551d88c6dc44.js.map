{"version":3,"sources":["webpack:///./node_modules/reactstrap/es/Badge.js","webpack:///./src/components/Post.js","webpack:///./src/pages/index.js","webpack:///./src/util/utilityFunctions.js","webpack:///./src/components/seo.js","webpack:///./node_modules/reactstrap/es/CardSubtitle.js"],"names":["propTypes","color","string","pill","bool","tag","innerRef","oneOfType","object","func","children","node","className","cssModule","Badge","props","Tag","attributes","classes","href","createElement","ref","defaultProps","Post","title","author","slug","date","body","fluid","tags","to","map","key","slugify","indexQuery","IndexPage","pageTitle","query","render","data","allMarkdownRemark","edges","id","frontmatter","fields","excerpt","image","childImageSharp","module","exports","text","toString","toLowerCase","replace","SEO","description","lang","meta","site","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","concat","CardSubtitle"],"mappings":"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","file":"component---src-pages-index-js-621cb934551d88c6dc44.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport { Card, CardTitle, CardText, CardSubtitle, CardBody, Badge} from 'reactstrap'\r\nimport Img from 'gatsby-image'\r\nimport { slugify } from '../util/utilityFunctions'\r\n\r\nconst Post = ({ title, author, slug, date, body, fluid, tags }) => {\r\n    return(\r\n        <Card>\r\n            <Link to={slug}>\r\n                <Img className=\"card-image-top\" fluid={fluid} />\r\n            </Link>\r\n            <CardBody>\r\n                <CardTitle><Link to={slug}>{title}</Link></CardTitle>\r\n                <CardSubtitle>\r\n                    <span className=\"text-info\">{date}</span> by{' '}\r\n                    <span className=\"text-info\">{author}</span>\r\n                </CardSubtitle>\r\n                <CardText>{body}</CardText>\r\n                <ul className=\"post-tags\">\r\n                    {tags.map(tag => (\r\n                        <li key={tag}>\r\n                            <Link to={`/tag/${slugify(tag)}`}>\r\n                                <Badge color=\"primary\" className=\"text-uppercase\">{tag}</Badge>\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <Link to={slug} className=\"btn btn-outline-primary float-right\">\r\n                    Read more\r\n                </Link>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Post","import React from \"react\"\r\nimport { graphql, StaticQuery } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport Post from \"../components/Post\"\r\n\r\n\r\nconst IndexPage = () => (\r\n  <Layout pageTitle=\"PIN's blog\">\r\n    <SEO title=\"Home\" />       \r\n    <StaticQuery query={indexQuery} render={data => {\r\n      return(\r\n        <div>\r\n          {data.allMarkdownRemark.edges.map(({ node }) =>(\r\n            <Post\r\n              key={node.id}\r\n              title={node.frontmatter.title}\r\n              author={node.frontmatter.author}\r\n              slug={node.fields.slug}\r\n              date={node.frontmatter.date}\r\n              body={node.excerpt}\r\n              fluid={node.frontmatter.image.childImageSharp.fluid}\r\n              tags={node.frontmatter.tags}\r\n            />\r\n          ))}\r\n        </div>\r\n      )\r\n    }}/>\r\n  </Layout>\r\n)\r\n\r\nconst indexQuery = graphql`\r\n  query{\r\n    allMarkdownRemark(\r\n        sort: { fields: [frontmatter___date], order: DESC }\r\n        limit: 3\r\n      ){\r\n      edges{\r\n        node{\r\n          id\r\n          frontmatter{\r\n            title\r\n            date(formatString: \"MMM Do YYYY\")\r\n            author\r\n            tags\r\n            image{\r\n              childImageSharp{\r\n                fluid(maxWidth:600){\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields{\r\n            slug\r\n          }\r\n          excerpt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default IndexPage\r\n","const slugify = function(text) {\r\n    return text\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '-')       // Replace spaces with -\r\n      .replace(/[^\\w-]+/g, '')    // Remove all non-word chars\r\n      .replace(/--+/g, '-')       // Replace multiple - with single -\r\n      .replace(/^-+/, '')         // Trim - from start of text\r\n      .replace(/-+$/, '')         // Trim - from end of text\r\n  }\r\n\r\nmodule.exports =  { slugify }","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Helmet from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardSubtitle = function CardSubtitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-subtitle'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardSubtitle.propTypes = propTypes;\nCardSubtitle.defaultProps = defaultProps;\nexport default CardSubtitle;"],"sourceRoot":""}