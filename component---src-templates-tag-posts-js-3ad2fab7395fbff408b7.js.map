{"version":3,"sources":["webpack:///./node_modules/reactstrap/es/Badge.js","webpack:///./src/templates/tag-posts.js","webpack:///./src/components/Post.js","webpack:///./src/util/utilityFunctions.js","webpack:///./node_modules/reactstrap/es/CardSubtitle.js"],"names":["propTypes","color","string","pill","bool","tag","innerRef","oneOfType","object","func","children","node","className","cssModule","Badge","props","Tag","attributes","classes","href","createElement","ref","defaultProps","tagQuery","tagPosts","data","pageContext","totalCount","allMarkdownRemark","pageHeader","pageTitle","edges","map","key","id","slug","fields","title","frontmatter","author","date","body","excerpt","tags","fluid","image","childImageSharp","Post","to","slugify","module","exports","text","toString","toLowerCase","replace","CardSubtitle"],"mappings":"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","file":"component---src-templates-tag-posts-js-3ad2fab7395fbff408b7.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../components/layout'\r\nimport Post from '../components/Post'\r\n\r\nconst tagPosts = ({ data, pageContext }) => {\r\n    const { tag } = pageContext\r\n    const { totalCount } = data.allMarkdownRemark\r\n    const pageHeader = `${totalCount} post${\r\n        totalCount === 1 ?'' : 's'\r\n    } tagged with \"${tag}\"`\r\n\r\n    return(\r\n        <Layout pageTitle={pageHeader}>\r\n            {data.allMarkdownRemark.edges.map(({node}) => (\r\n                <Post key={node.id}\r\n                    slug={node.fields.slug}\r\n                    title={node.frontmatter.title}\r\n                    author={node.frontmatter.author}\r\n                    date={node.frontmatter.date}\r\n                    body={node.excerpt}\r\n                    tags={node.frontmatter.tags}\r\n                    fluid={node.frontmatter.image.childImageSharp.fluid}\r\n                    />\r\n\r\n            ))}\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport const tagQuery = graphql`\r\n    query($tag: String!){\r\n        allMarkdownRemark(\r\n            sort: { fields: [frontmatter___date], order: DESC }\r\n            filter: { frontmatter: { tags: {in: [$tag]}}}\r\n        ){\r\n            totalCount\r\n            edges{\r\n                node{\r\n                    id\r\n                    frontmatter{\r\n                        title\r\n                        date(formatString: \"MMM Do YYYY\")\r\n                        author\r\n                        tags\r\n                        image {\r\n                            childImageSharp{\r\n                                fluid(maxWidth: 650, maxHeight: 370){\r\n                                    ...GatsbyImageSharpFluid\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    fields{\r\n                        slug\r\n                    }\r\n                    excerpt\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport default tagPosts","import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport { Card, CardTitle, CardText, CardSubtitle, CardBody, Badge} from 'reactstrap'\r\nimport Img from 'gatsby-image'\r\nimport { slugify } from '../util/utilityFunctions'\r\n\r\nconst Post = ({ title, author, slug, date, body, fluid, tags }) => {\r\n    return(\r\n        <Card>\r\n            <Link to={slug}>\r\n                <Img className=\"card-image-top\" fluid={fluid} />\r\n            </Link>\r\n            <CardBody>\r\n                <CardTitle><Link to={slug}>{title}</Link></CardTitle>\r\n                <CardSubtitle>\r\n                    <span className=\"text-info\">{date}</span> by{' '}\r\n                    <span className=\"text-info\">{author}</span>\r\n                </CardSubtitle>\r\n                <CardText>{body}</CardText>\r\n                <ul className=\"post-tags\">\r\n                    {tags.map(tag => (\r\n                        <li key={tag}>\r\n                            <Link to={`/tag/${slugify(tag)}`}>\r\n                                <Badge color=\"primary\" className=\"text-uppercase\">{tag}</Badge>\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <Link to={slug} className=\"btn btn-outline-primary float-right\">\r\n                    Read more\r\n                </Link>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Post","const slugify = function(text) {\r\n    return text\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '-')       // Replace spaces with -\r\n      .replace(/[^\\w-]+/g, '')    // Remove all non-word chars\r\n      .replace(/--+/g, '-')       // Replace multiple - with single -\r\n      .replace(/^-+/, '')         // Trim - from start of text\r\n      .replace(/-+$/, '')         // Trim - from end of text\r\n  }\r\n\r\nmodule.exports =  { slugify }","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardSubtitle = function CardSubtitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-subtitle'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardSubtitle.propTypes = propTypes;\nCardSubtitle.defaultProps = defaultProps;\nexport default CardSubtitle;"],"sourceRoot":""}