{"version":3,"sources":["webpack:///./node_modules/reactstrap/es/Badge.js","webpack:///./src/util/utilityFunctions.js","webpack:///./src/templates/single-post.js","webpack:///./node_modules/reactstrap/es/CardSubtitle.js"],"names":["propTypes","color","string","pill","bool","tag","innerRef","oneOfType","object","func","children","node","className","cssModule","Badge","props","Tag","attributes","classes","href","createElement","ref","defaultProps","module","exports","slugify","text","toString","toLowerCase","replace","postQuery","SinglePost","data","post","markdownRemark","frontmatter","pageTitle","title","fluid","image","childImageSharp","date","author","dangerouslySetInnerHTML","__html","html","tags","map","key","to","CardSubtitle"],"mappings":"6FAAA,uGAMIA,EAAY,CACdC,MAAO,IAAUC,OACjBC,KAAM,IAAUC,KAChBC,IAAK,IACLC,SAAU,IAAUC,UAAU,CAAC,IAAUC,OAAQ,IAAUC,KAAM,IAAUP,SAC3EQ,SAAU,IAAUC,KACpBC,UAAW,IAAUV,OACrBW,UAAW,IAAUL,QAQnBM,EAAQ,SAAeC,GACzB,IAAIH,EAAYG,EAAMH,UAClBC,EAAYE,EAAMF,UAClBZ,EAAQc,EAAMd,MACdK,EAAWS,EAAMT,SACjBH,EAAOY,EAAMZ,KACba,EAAMD,EAAMV,IACZY,EAAa,YAA8BF,EAAO,CAAC,YAAa,YAAa,QAAS,WAAY,OAAQ,QAE1GG,EAAU,YAAgB,IAAWN,EAAW,QAAS,SAAWX,IAAOE,GAAO,cAAuBU,GAM7G,OAJII,EAAWE,MAAgB,SAARH,IACrBA,EAAM,KAGD,IAAMI,cAAcJ,EAAK,YAAS,GAAIC,EAAY,CACvDL,UAAWM,EACXG,IAAKf,MAITQ,EAAMd,UAAYA,EAClBc,EAAMQ,aA5Ba,CACjBrB,MAAO,YACPE,MAAM,EACNE,IAAK,QA0BQ,O,qDCjCfkB,EAAOC,QAAW,CAAEC,QAXJ,SAASC,GACrB,OAAOA,EACJC,WACAC,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,O,kCCRrB,2MAsCaC,EAAS,aAsBPC,UAnDI,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACXC,EAAOD,EAAKE,eAAeC,YACjC,OACI,kBAAC,IAAD,CAAQC,UAAWH,EAAKI,OACrB,kBAAC,IAAD,CAAKA,MAAOJ,EAAKI,QACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKzB,UAAU,eAAe0B,MAAOL,EAAKM,MAAMC,gBAAgBF,QAChE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,0BAAM1B,UAAU,aAAaqB,EAAKQ,MADtC,MACsD,IAClD,0BAAM7B,UAAU,aAAaqB,EAAKS,SAEtC,yBAAKC,wBAAyB,CAAEC,OAAOZ,EAAKE,eAAeW,QAC3D,wBAAIjC,UAAU,aACTqB,EAAKa,KAAKC,KAAI,SAAA1C,GAAG,OACd,wBAAI2C,IAAK3C,GACL,kBAAC,OAAD,CAAM4C,GAAE,QAAUxB,kBAAQpB,IACtB,kBAAC,IAAD,CAAOJ,MAAM,WAAWI,c,kCC1BhE,uGAMIL,EAAY,CACdK,IAAK,IACLO,UAAW,IAAUV,OACrBW,UAAW,IAAUL,QAMnB0C,EAAe,SAAsBnC,GACvC,IAAIH,EAAYG,EAAMH,UAClBC,EAAYE,EAAMF,UAClBG,EAAMD,EAAMV,IACZY,EAAa,YAA8BF,EAAO,CAAC,YAAa,YAAa,QAE7EG,EAAU,YAAgB,IAAWN,EAAW,iBAAkBC,GACtE,OAAO,IAAMO,cAAcJ,EAAK,YAAS,GAAIC,EAAY,CACvDL,UAAWM,MAIfgC,EAAalD,UAAYA,EACzBkD,EAAa5B,aAjBM,CACjBjB,IAAK,OAiBQ","file":"component---src-templates-single-post-js-cdf7cdde6caa137d359b.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  color: PropTypes.string,\n  pill: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  color: 'secondary',\n  pill: false,\n  tag: 'span'\n};\n\nvar Badge = function Badge(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      color = props.color,\n      innerRef = props.innerRef,\n      pill = props.pill,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"color\", \"innerRef\", \"pill\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'badge', 'badge-' + color, pill ? 'badge-pill' : false), cssModule);\n\n  if (attributes.href && Tag === 'span') {\n    Tag = 'a';\n  }\n\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes,\n    ref: innerRef\n  }));\n};\n\nBadge.propTypes = propTypes;\nBadge.defaultProps = defaultProps;\nexport default Badge;","const slugify = function(text) {\r\n    return text\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, '-')       // Replace spaces with -\r\n      .replace(/[^\\w-]+/g, '')    // Remove all non-word chars\r\n      .replace(/--+/g, '-')       // Replace multiple - with single -\r\n      .replace(/^-+/, '')         // Trim - from start of text\r\n      .replace(/-+$/, '')         // Trim - from end of text\r\n  }\r\n\r\nmodule.exports =  { slugify }"," import React from 'react'\r\n import Layout from '../components/layout'\r\n import Sidebar from '../components/Sidebar'\r\n import { graphql, Link } from 'gatsby'\r\n import SEO from '../components/seo'\r\n import { Card, CardBody, CardSubtitle, Badge, Row, Col } from 'reactstrap'\r\n import Img from 'gatsby-image'\r\n import {slugify} from '../util/utilityFunctions'\r\n\r\n const SinglePost = ({data}) => {\r\n     const post = data.markdownRemark.frontmatter\r\n     return(\r\n         <Layout pageTitle={post.title}>\r\n            <SEO title={post.title}/>\r\n                <Card>\r\n                    <Img className=\"card-img-top\" fluid={post.image.childImageSharp.fluid}/>\r\n                    <CardBody>\r\n                        <CardSubtitle>\r\n                            <span className=\"text-info\">{post.date}</span> by{' '}\r\n                            <span className=\"text-info\">{post.author}</span>                                \r\n                        </CardSubtitle>\r\n                        <div dangerouslySetInnerHTML={{ __html:data.markdownRemark.html }}/>\r\n                        <ul className=\"post-tags\">\r\n                            {post.tags.map(tag =>(\r\n                                <li key={tag}>\r\n                                    <Link to={`/tag/${slugify(tag)}`}>\r\n                                        <Badge color=\"Primary\">{tag}</Badge>\r\n                                    </Link>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </CardBody>\r\n                </Card>\r\n         </Layout>\r\n     )\r\n\r\n }\r\n\r\n export const postQuery = graphql`\r\n    query blogPostByslug($slug: String!){\r\n        markdownRemark(fields: { slug: {eq: $slug}}){\r\n            id\r\n            html\r\n            frontmatter{\r\n                title\r\n                author\r\n                date(formatString: \"MMM Do YYYY\")\r\n                tags\r\n                image{\r\n                    childImageSharp{\r\n                        fluid(maxWidth:700){\r\n                            ...GatsbyImageSharpFluid\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n `\r\n\r\n export default SinglePost","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardSubtitle = function CardSubtitle(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-subtitle'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardSubtitle.propTypes = propTypes;\nCardSubtitle.defaultProps = defaultProps;\nexport default CardSubtitle;"],"sourceRoot":""}